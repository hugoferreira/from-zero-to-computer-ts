import { Wire, toHex as th, toBin as tb } from './circuitsimulator'
import { SAP1 } from './sap-1'

const toHex = th
const toBin = tb

const microcode = [
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x00C0, 0x8210, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x00C0, 0x2210, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x9000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x6000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x00C0, 0x0050, 0x4220, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x00C0, 0x0050, 0x1220, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x00C0, 0x0050, 0x8210, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x00C0, 0x0050, 0x2210, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x8004, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x8008, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x800C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x00C0, 0x0A10, 0x00C0, 0x0110, 0x0000, 0x0000, 0x0000, 0x0000]

const program = [0x01, 0x03, 0x02, 0x02, 0x10, 0x08, 0x1C, 0x1F, 0x02]

const s = new SAP1()
const CLK = s.clock(1, false)
const RESET = new Wire

const { DBUS,
    A_DATA,
    B_DATA,
    IR_DATA,
    MAR_DATA,
    PC_DATA,
    ALU_DATA,
    RAM_DATA,
    OPCODE,
    STEP,
    CTRL } = s.build(CLK, RESET, microcode, 0, program)

s.do()
STEP        //? toBin($)
OPCODE      //? toBin($)
CTRL        //? toBin($)
MAR_DATA    //? toHex($)
DBUS        //? toHex($)
IR_DATA     //? toHex($)
PC_DATA     //? toHex($)

s.posedge(CLK)
STEP        //? toBin($)
OPCODE      //? toBin($)
CTRL        //? toBin($)
MAR_DATA    //? toHex($)
DBUS        //? toHex($)
IR_DATA     //? toHex($)
PC_DATA     //? toHex($)

s.posedge(CLK)
STEP        //? toBin($)
OPCODE      //? toBin($)
CTRL        //? toBin($)
MAR_DATA    //? toHex($)
DBUS        //? toHex($)
IR_DATA     //? toBin($)
PC_DATA     //? toHex($)

s.posedge(CLK)
STEP        //? toBin($)
OPCODE      //? toBin($)
CTRL        //? toBin($)
A_DATA      //? toHex($)
DBUS        //? toHex($)
IR_DATA     //? toHex($)
PC_DATA     //? toHex($)

s.posedge(CLK)
STEP        //? toHex($)
CTRL        //? toBin($)
A_DATA      //? toHex($)
DBUS        //? toHex($)
IR_DATA     //? toHex($)
PC_DATA     //? toHex($)

s.posedge(CLK)
STEP        //? toHex($)
CTRL        //? toBin($)

s.posedge(CLK)
STEP        //? toHex($)
CTRL        //? toBin($)

s.posedge(CLK)
STEP        //? toHex($)
CTRL        //? toBin($)

s.posedge(CLK)
STEP        //? toHex($)
CTRL        //? toBin($)

s.posedge(CLK)
STEP        //? toHex($)
CTRL        //? toBin($)

s.posedge(CLK)
STEP        //? toHex($)
CTRL        //? toBin($)

